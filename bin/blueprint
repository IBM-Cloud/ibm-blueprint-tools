#!/usr/bin/env python3

# (C) Copyright IBM Corp. 2022.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
blueprint:
    Blueprint helper tools for IBM Cloud Schematics.
"""

import os
import sys
import argparse
from os.path import exists
from pathlib import Path

from blueprint.validate import schema_validator
from blueprint.validate import blueprint_validator
from blueprint.merge import manifest
from blueprint.sync import bpsync
from blueprint.run import bprunner
from blueprint.lib import bfile
from blueprint.lib import event
from blueprint.circuit import bpdraw as viz
from blueprint.circuit import schem_draw as ic

from blueprint.lib.logger import logr
import logging
logr = logging.getLogger(__name__)

def eprint(*args, **kwargs):
    logr.error(*args)
    print(*args, file=sys.stderr, **kwargs)

def main():

    # Create the parser
    arg_parser = argparse.ArgumentParser(
        description='Blueprint helper tools for IBM Cloud Schematics')
    
    subparser = arg_parser.add_subparsers(dest='command')
    validate = subparser.add_parser('validate')
    draw = subparser.add_parser('draw')
    merge = subparser.add_parser('merge')
    # generate = subparser.add_parser('generate')
    sync = subparser.add_parser('sync')
    run = subparser.add_parser('run')

    validate.add_argument('-b', '--bp-file', type=str, required=True, help='input blueprint configuration yaml file', default=None)
    validate.add_argument('-s', '--source-dir', type=str, required=False, help='source directory for input files', default=None)
    validate.add_argument('-l', '--log-file', type=str, required=False, help='log file', default=None)
    validate.add_argument('-e', '--log-level', choices=['DEBUG','INFO','WARNING','ERROR'], required=False, help='log level setting', default=None)
    validate.add_argument('-j', '--log-json', action='store_false', help='logs error messages in json format')

    draw.add_argument('-b', '--bp-file', type=str, required=True, help='input blueprint configuration yaml file', default=None)
    draw.add_argument('-s', '--source-dir', type=str, required=False, help='source directory for input files', default=None)
    draw.add_argument('-t', '--out-file-type', choices=["viz", "ic"], required=False, help='type of output blueprint drawing file', default="viz")
    draw.add_argument('-o', '--out-file', type=str, required=False, help='output blueprint drawing file', default="out_blueprint")
    draw.add_argument('-f', '--out-format', choices=["png", "jpg", "svg", "pdf", "dot"], required=False, help='format of the blueprint drawing file ("png", "jpg", "svg", "pdf", "dot")', default="png")
    draw.add_argument('-w', '--working-dir', type=str, required=True, help='working directory for the intermediate files', default='.')
    draw.add_argument('-l', '--log-file', type=str, required=False, help='log file', default=None)
    draw.add_argument('-e', '--log-level', choices=['DEBUG','INFO','WARNING','ERROR'], required=False, help='log level setting', default=None)
    draw.add_argument('-j', '--log-json', action='store_false', help='logs error messages in json format')

    merge.add_argument('-m', '--manifest-file', type=str, required=True, help='input blueprint manifest file', default=None)
    merge.add_argument('-s', '--source-dir', type=str, required=False, help='source directory for input files', default=None)
    merge.add_argument('-o', '--out-file', type=str, required=True, help='output blueprint configuration yaml file', default=None)
    merge.add_argument('-l', '--log-file', type=str, required=False, help='log file', default=None)
    merge.add_argument('-e', '--log-level', choices=['DEBUG','INFO','WARNING','ERROR'], required=False, help='log level setting', default=None)
    merge.add_argument('-j', '--log-json', action='store_false', help='logs error messages in json format')

    # generate.add_argument('-p', '--python-file', type=str, required=True, help='Python file used to describe the blueprint yaml', default=None)
    # generate.add_argument('-s', '--source-dir', type=str, required=False, help='source directory for python files', default='.')
    # generate.add_argument('-o', '--out-file', type=str, required=False, help='Output blueprint configuration yaml file', default=None)
    # generate.add_argument('-l', '--log-file', type=str, required=False, help='log file', default=None)
    # generate.add_argument('-e', '--log-level', choices=['DEBUG','INFO','WARNING','ERROR'], required=False, help='log level setting', default=None)

    sync.add_argument('-b', '--bp-file', type=str, required=True, help='input blueprint lite configuration yaml file', default=None)
    sync.add_argument('-s', '--source-dir', type=str, required=False, help='source directory for input files', default=None)
    sync.add_argument('-o', '--out-file', type=str, required=True, help='output blueprint configuration yaml file', default=None)
    sync.add_argument('-w', '--working-dir', type=str, required=True, help='working directory for the intermediate files', default='.')
    sync.add_argument('-l', '--log-file', type=str, required=False, help='log file', default=None)
    sync.add_argument('-e', '--log-level', choices=['DEBUG','INFO','WARNING','ERROR'], required=False, help='log level setting', default=None)
    sync.add_argument('-j', '--log-json', action='store_false', help='logs error messages in json format')

    run.add_argument('-c', '--sub-command', choices= ['init', 'plan', 'apply', 'destroy'], required=True, help='blueprint command', default=None)
    run.add_argument('-d', '--dry-run', action='store_false', help='dry run the command, to preview outcome', default=None)
    run.add_argument('-g', '--ignore-validation-errors', action='store_false', help='ignore validation errors', default=None)
    run.add_argument('-b', '--bp-file', type=str, required=True, help='input blueprint configuration yaml file', default=None)
    run.add_argument('-i', '--input-file', type=str, required=True, help='input blueprint data file', default=None)
    run.add_argument('-s', '--source-dir', type=str, required=False, help='source directory for blueprint and input data files', default='.')
    run.add_argument('-w', '--working-dir', type=str, required=True, help='working directory for intermediate files', default='.')
    run.add_argument('-o', '--out-file', type=str, required=False, help='output blueprint file', default=None)
    run.add_argument('-l', '--log-file', type=str, required=False, help='log file', default=None)
    run.add_argument('-e', '--log-level', choices=['DEBUG','INFO','WARNING','ERROR'], required=False, help='log level setting', default=None)
    run.add_argument('-j', '--log-json', action='store_false', help='logs error messages in json format')

    # Execute the parse_args() method
    args = arg_parser.parse_args()

    if args.log_level == None:
        level = logging.WARNING
        logrLevel = event.BPWarning
    elif args.log_level == 'DEBUG':
        level = logging.DEBUG
        logrLevel = event.BPDebug
    elif args.log_level == 'INFO':
        level = logging.INFO
        logrLevel = event.BPInfo
    elif args.log_level == 'WARNING':
        level = logging.WARNING
        logrLevel = event.BPWarning
    elif args.log_level == 'ERROR':
        level = logging.ERROR
        logrLevel = event.BPError
    else:
        level = logging.WARNING
        logrLevel = event.BPWarning

    print("setting log level to " + str(level))

    if args.log_file != None and len(args.log_file) > 0:
        log_file = args.log_file
        # print("setting log file handler to " + log_file)
        # fh = logging.FileHandler(log_file)
        # logr.addHandler(fh)
        
        logging.basicConfig(filename = log_file, format='%(asctime)s - %(name)s - %(levelname)s: %(message)s', encoding='utf-8', level=level)
    else:
        logging.basicConfig(filename = "logfile.log", format='%(asctime)s - %(name)s - %(levelname)s: %(message)s', encoding='utf-8', level=logging.INFO)

    log_json_format = args.log_json

    if args.command == 'validate':
        if args.bp_file:
            bp_filename = args.bp_file
            source_dir = args.source_dir
            if source_dir:
                if not os.path.exists(source_dir):
                    print('Error in source_dir, or directory does not exists')
                    logr.error('Error in source_dir, or directory does not exists')
                    return -1
                source_path = Path(source_dir)
                if not source_path.is_dir():
                    print('Error in source_dir, not a directory')
                    logr.error('Error in source_dir, not a directory')
                    return -1

                source_dir = os.path.abspath(source_dir)
                bp_filename = os.path.join(source_dir, bp_filename)
                if not os.path.exists(bp_filename):
                    print('Invalid source file location for blueprint : ' + bp_filename)
                    logr.error('Invalid source file location for blueprint : ' + bp_filename)
                    return -1

            logr.info("Validate - " + bp_filename)
            print("Validate - " + bp_filename)
            bv = schema_validator.SchemaValidator(bp_filename)
            (msg, err) = bv.validate()
            if err != None:
                eprint(err)
            else:
                print(msg)
            
            logr.info("Advanced validation - " + bp_filename)
            print("Advanced validation - " + bp_filename)
            bp = bfile.FileHelper.load_blueprint(bp_filename)
            if bp == None:
                eprint("Error loading blueprint, for advanced validation")
            else:
                bpv = blueprint_validator.BlueprintModel(bp)
                errors = bpv.validate_model()
                if errors != None:
                    eprint(event.format_events(errors, event.Format.Table if log_json_format else event.Format.Json))
        else:
            eprint("Blueprint configuration file parameter is required")

    elif args.command == 'draw':
        if args.bp_file:
            bp_filename = args.bp_file
            source_dir = args.source_dir
            output_draw_file = args.out_file
            output_draw_format = args.out_format
            output_draw_type = args.out_file_type
            working_dir = args.working_dir

            if source_dir:
                if not os.path.exists(source_dir):
                    print('Error in source_dir, or directory does not exists')
                    logr.error('Error in source_dir, or directory does not exists')
                    return -1
                source_path = Path(source_dir)
                if not source_path.is_dir():
                    print('Error in source_dir, not a directory')
                    logr.error('Error in source_dir, not a directory')
                    return -1

                source_dir = os.path.abspath(source_dir)
                bp_filename = os.path.join(source_dir, bp_filename)
                if not os.path.exists(bp_filename):
                    print('Invalid source file location for blueprint : ' + bp_filename)
                    logr.error('Invalid source file location for blueprint : ' + bp_filename)
                    return -1

            if working_dir:
                working_dir = os.path.abspath(working_dir)
                working_path = Path(working_dir)
                if not os.path.exists(working_dir):
                    logr.info("Creating the working directory: " + working_dir)
                    working_path.mkdir(parents=True, exist_ok=True)                

            out_file_path = os.path.dirname(output_draw_file)
            if out_file_path == None or len(out_file_path) == 0:
                if working_dir != None and len(working_dir) > 0:
                    print('Output file path has not defined or path not exists. Default to working_dir')
                    logr.error('Output file path has not defined or path not exists. Default to working_dir')
                    output_draw_file = os.path.join(working_dir, os.path.basename(output_draw_file))
                else:
                    print('Output file path and Working directory has not defined or path not exists. Default to "./"')
                    logr.error('Output file path and Working directory has not defined or path not exists. Default to "./"')
                    output_draw_file = os.path.join("./", os.path.basename(output_draw_file))
            
            if output_draw_format == None or output_draw_format not in ["png", "jpg", "svg", "pdf", "dot"]:
                print('Invalid output file format, using default : png')
                logr.error('Invalid output file format, using default : png')

            logr.info("Draw - " + bp_filename)
            print("Draw - " + bp_filename)
            if output_draw_type == 'ic':
                bd = ic.BlueprintBoard(blueprint_file = bp_filename)
                errors = bd.prepare(working_dir = working_dir)
                bd.draw(shape='a', bend='z')
            else: # output_draw_type == 'viz'
                bd = viz.BlueprintDraw(blueprint_file = bp_filename)
                errors = bd.prepare(working_dir = working_dir)
                bd.draw(out_file = output_draw_file, out_format = output_draw_format)
            eprint(event.format_events(errors, event.Format.Table if log_json_format else event.Format.Json))
        else:
            eprint("Blueprint configuration file parameter is required")
        
    elif args.command == 'merge':
        if args.manifest_file:
            bp_manifest = args.manifest_file
            output_blueprint_file = args.out_file
            source_dir = args.source_dir

            if source_dir:
                if not os.path.exists(source_dir):
                    print('Error in source_dir, or directory does not exists')
                    logr.error('Error in source_dir, or directory does not exists')
                    return -1
                source_path = Path(source_dir)
                if not source_path.is_dir():
                    print('Error in source_dir, not a directory')
                    logr.error('Error in source_dir, not a directory')
                    return -1

                source_dir = os.path.abspath(source_dir)
                bp_manifest = os.path.join(source_dir, bp_manifest)
                if not os.path.exists(bp_manifest):
                    print('Invalid source file location for blueprint manifest : ' + bp_manifest)
                    logr.error('Invalid source file location for blueprint manifest : ' + bp_manifest)
                    return -1
                
            if output_blueprint_file != None:
                out_file_path = os.path.dirname(output_blueprint_file)
                if out_file_path == None or len(out_file_path) == 0:
                    print('Output file path has not defined or path not exists. Default to "./"')
                    logr.error('Output file path has not defined or path not exists. Default to "./"')
                    output_blueprint_file = os.path.join("./", os.path.basename(output_blueprint_file))

            print("Merge - " + bp_manifest)
            logr.info("Merge - " + bp_manifest)

            bp_manifest = manifest.BlueprintManifest.from_yaml_file(bp_manifest)
            (bp, errors) = bp_manifest.generate_blueprint()
            if len(errors) > 0:
                eprint("Error generating blueprints from manifest:")
                eprint(event.format_events(errors, event.Format.Table if log_json_format else event.Format.Json))

            (out_yaml_str, errors) = bp.to_yaml_str()
            logr.debug(out_yaml_str)
            if len(errors) > 0:
                eprint("Validation errors:")
                eprint(event.format_events(errors, event.Format.Table if log_json_format else event.Format.Json))

            if output_blueprint_file == None or output_blueprint_file == '':
                print(out_yaml_str)
            else:
                with open(output_blueprint_file, 'w') as yaml_file:
                    yaml_file.write(out_yaml_str)
    
    # elif args.command == 'generate':
    #     if args.python_file:
    #         bp_filename = args.python_file
    #         source_dir = args.source_dir
    #         output_blueprint_file = args.out_file
    #         if source_dir:
    #             python_file = os.path.join(source_dir, bp_filename)
    #         print("Generate - " + python_file)

    #         # import subprocess
    #         # subprocess.call(python_file, shell=True)
    #         # exec(open(python_file).read())
    #         manifest = importlib.import_module(bp_filename)
    #         bp, errors = manifest.blueprint_manifest()
    #         bp.to_yaml_str()

    elif args.command == 'sync':
        if args.bp_file:
            bp_filename = args.bp_file
            source_dir = args.source_dir
            output_blueprint_file = args.out_file
            working_dir = args.working_dir

            if source_dir:
                if not os.path.exists(source_dir):
                    print('Error in source_dir, or directory does not exists')
                    logr.error('Error in source_dir, or directory does not exists')
                    return -1
                source_path = Path(source_dir)
                if not source_path.is_dir():
                    print('Error in source_dir, not a directory')
                    logr.error('Error in source_dir, not a directory')
                    return -1

                source_dir = os.path.abspath(source_dir)
                bp_filename = os.path.join(source_dir, bp_filename)
                if not os.path.exists(bp_filename):
                    print('Invalid source file location for blueprint : ' + bp_filename)
                    logr.error('Invalid source file location for blueprint : ' + bp_filename)
                    return -1

            if working_dir:
                working_dir = os.path.abspath(working_dir)
                working_path = Path(working_dir)
                if not os.path.exists(working_dir):
                    logr.info("Creating the working directory: " + working_dir)
                    working_path.mkdir(parents=True, exist_ok=True)                

            if output_blueprint_file != None:
                out_file_path = os.path.dirname(output_blueprint_file)
                if out_file_path == None or len(out_file_path) == 0:
                    if working_dir != None and len(working_dir) > 0:
                        print('Output file path has not defined or path not exists. Default to working_dir')
                        logr.error('Output file path has not defined or path not exists. Default to working_dir')
                        output_blueprint_file = os.path.join(working_dir, os.path.basename(output_blueprint_file))
                    else:
                        print('Output file path and Working directory has not defined or path not exists. Default to "./"')
                        logr.error('Output file path and Working directory has not defined or path not exists. Default to "./"')
                        output_blueprint_file = os.path.join("./", os.path.basename(output_blueprint_file))

            if working_dir:
                working_dir = os.path.abspath(working_dir)
                working_path = Path(working_dir)
                if not os.path.exists(working_dir):
                    logr.info("Creating the working directory: " + working_dir)
                    working_path.mkdir(parents=True, exist_ok=True)                

            print("Sync - " + bp_filename)
            logr.info("Sync - " + bp_filename)

            bm = bpsync.BlueprintMorphius.from_yaml_file(bp_filename)
            bp = bm.sync_blueprint(working_dir, annotate = True)

            (out_yaml_str, errors) = bp.to_yaml_str()
            logr.debug(out_yaml_str)
            if len(errors) > 0:
                eprint(event.format_events(errors, event.Format.Table if log_json_format else event.Format.Json))

            if output_blueprint_file == None or output_blueprint_file == '':
                print(out_yaml_str)
            else:
                with open(output_blueprint_file, 'w') as yaml_file:
                    yaml_file.write(out_yaml_str)

    elif args.command == 'run':
        if args.sub_command and args.bp_file and args.input_file :
            command = args.sub_command
            dry_run = False if args.dry_run == None else True
            ignore_validation_errors = False if args.ignore_validation_errors == None else True
            bp_filename = args.bp_file
            input_file = args.input_file
            source_dir = args.source_dir
            working_dir = args.working_dir
            output_blueprint_file = args.out_file

            print(" Ignore validation error : " + str(ignore_validation_errors))

            if source_dir:
                if not os.path.exists(source_dir):
                    print('Error in source_dir, or directory does not exists')
                    logr.error('Error in source_dir, or directory does not exists')
                    return -1
                source_path = Path(source_dir)
                if not source_path.is_dir():
                    print('Error in source_dir, not a directory')
                    logr.error('Error in source_dir, not a directory')
                    return -1

                source_dir = os.path.abspath(source_dir)
                bp_filename = os.path.join(source_dir, bp_filename)
                if not os.path.exists(bp_filename):
                    print('Invalid source file location for blueprint : ' + bp_filename)
                    logr.error('Invalid source file location for blueprint : ' + bp_filename)
                    return -1

                input_file = os.path.join(source_dir, input_file)
                if not os.path.exists(input_file):
                    print('Invalid input data file location for blueprint : ' + input_file)
                    logr.error('Invalid input data file location for blueprint : ' + input_file)
                    return -1

            if working_dir:
                working_dir = os.path.abspath(working_dir)
                working_path = Path(working_dir)
                if not os.path.exists(working_dir):
                    logr.info("Creating the working directory: " + working_dir)
                    working_path.mkdir(parents=True, exist_ok=True)                

            if output_blueprint_file != None:
                out_file_path = os.path.dirname(output_blueprint_file)
                if out_file_path == None or len(out_file_path) == 0:
                    if working_dir != None and len(working_dir) > 0:
                        print('Output file path has not defined or path not exists. Default to working_dir')
                        logr.error('Output file path has not defined or path not exists. Default to working_dir')
                        output_blueprint_file = os.path.join(working_dir, os.path.basename(output_blueprint_file))
                    else:
                        print('Output file path and Working directory has not defined or path not exists. Default to "./"')
                        logr.error('Output file path and Working directory has not defined or path not exists. Default to "./"')
                        output_blueprint_file = os.path.join("./", os.path.basename(output_blueprint_file))

            print("Run - (" + bp_filename + ", " + input_file + ")")
            logr.info("Run - (" + bp_filename + ", " + input_file + ")")

            br = bprunner.BlueprintRunner(blueprint_file = bp_filename, 
                                    input_data_file = input_file, 
                                    dry_run = dry_run,
                                    ignore_validation_errors = ignore_validation_errors,
                                    working_dir = working_dir)
            if command == 'init':
                print("Command > blueprint init")
                logr.info("Command > blueprint init")
                e = br.init_modules()
                if len(e) > 0:
                    logr.error("Init errors \n" + str(e))
                    print("Init errors \n" + str(e))
                else:
                    logr.info("Successful Init")
                    print("Successful Init")
            elif command == 'plan':
                print("Command > blueprint plan")
                logr.info("Command > blueprint plan")
                e = br.plan_modules()
                if len(e) > 0:
                    logr.error("Plan errors \n" + str(e))
                    print("Plan errors \n" + str(e))
                else:
                    logr.info("Successful Plan")
                    print("Successful Plan")
            elif command == 'apply':
                print("Command > blueprint apply")
                logr.info("Command > blueprint apply")
                e = br.apply_modules()
                if len(e) > 0:
                    logr.error("Apply errors \n" + str(e))
                    print("Apply errors \n" + str(e))
                else:
                    logr.info("Successful Apply")
                    print("Successful Apply")
            elif command == 'destroy':
                print("Command > blueprint destroy")
                logr.info("Command > blueprint destroy")
                e = br.destroy_modules()
                if len(e) > 0:
                    logr.error("Destroy errors \n" + str(e))
                    print("Destroy errors \n" + str(e))
                else:
                    logr.info("Successful Destroy")
                    print("Successful Destroy")
            else:
                logr.error("Invalid command name")

            (bp_yaml_str, errors) = br.bp.to_yaml_str(do_validate = False)
            logr.debug(bp_yaml_str)
            logr.debug("Module data: \n" + str(br.module_data))

            if output_blueprint_file == None or output_blueprint_file == '':
                print('============================================================')
                print('Updated blueprint configuration:')
                print('============================================================')
                print(bp_yaml_str)
                print('============================================================')
                print('Computed module data:')
                print('============================================================')
                print(str(br.module_data))
                print('============================================================')
            else:
                with open(output_blueprint_file, 'w') as yaml_file:
                    yaml_file.write(bp_yaml_str)
        else:
            eprint("Blueprint configuration file parameter is required")
    else:
        eprint("Error in blueprint tools CLI")


if __name__ == '__main__':
    ver = sys.version_info[0] * 100 + sys.version_info[1]
    if ver < 309:
        print("Pre-requisite error, please use Python 3.9 or higher")
        exit(-1)
    else:
        main()

