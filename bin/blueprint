#!/usr/bin/env python3

# (C) Copyright IBM Corp. 2022.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
blueprint:
    Blueprint helper tools for IBM Cloud Schematics.
"""

import os
import sys
import argparse
from blueprint.validate.validator import Validator
from blueprint.merge.load import BPLoader
import importlib

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def main():
    # Create the parser
    arg_parser = argparse.ArgumentParser(
        description='Blueprint helper tools for IBM Cloud Schematics')
    
    subparser = arg_parser.add_subparsers(dest='command')
    validate = subparser.add_parser('validate')
    merge = subparser.add_parser('merge')
    generate = subparser.add_parser('generate')

    validate.add_argument('-b', '--bp-file', type=str, required=True, help='input blueprint yaml file', default=None)
    validate.add_argument('-w', '--working-dir', type=str, required=False, help='working directory for validate command', default='.')

    merge.add_argument('-m', '--manifest-file', type=str, required=True, help='blueprint manifest file', default=None)
    merge.add_argument('-w', '--working-dir', type=str, required=False, help='working directory for merge command', default='.')
    merge.add_argument('-o', '--out-file', type=str, required=False, help='output blueprint yaml file', default=None)

    # generate.add_argument('-p', '--python-file', type=str, required=True, help='Python file used to describe the blueprint yaml', default=None)
    # generate.add_argument('-w', '--working-dir', type=str, required=False, help='Working directory for generate command', default='.')
    # generate.add_argument('-o', '--out-file', type=str, required=False, help='Output blueprint yaml file', default=None)

    # Execute the parse_args() method
    args = arg_parser.parse_args()

    if args.command == 'validate':
        if args.bp_file:
            filename = args.bp_file
            working_dir = args.working_dir
            file = os.path.join(working_dir, filename)
            print("Validate - " + file)
            Validator(file)
        else:
            eprint("Blueprint configuration file parameter is required")
    
    elif args.command == 'merge':
        if args.manifest_file:
            filename = args.manifest_file
            working_dir = args.working_dir
            output_blueprint_file = args.out_file
            input_manifest_file = os.path.join(working_dir, filename)

            print("Merge - " + input_manifest_file)
            loader = BPLoader(input_manifest_file)
            errors = loader.get_errors()
            if len(errors) > 0:
                eprint(errors)
                return -1

            out_yaml_str = loader.to_yaml_str()

            if output_blueprint_file == None or output_blueprint_file == '':
                print(out_yaml_str)
            else:
                with open(output_blueprint_file, 'w') as yaml_file:
                    yaml_file.write(out_yaml_str)
    
    # elif args.command == 'generate':
    #     if args.python_file:
    #         filename = args.python_file
    #         working_dir = args.working_dir
    #         output_blueprint_file = args.out_file
    #         python_file = os.path.join(working_dir, filename)
    #         print("Generate - " + python_file)

    #         # import subprocess
    #         # subprocess.call(python_file, shell=True)
    #         # exec(open(python_file).read())
    #         manifest = importlib.import_module(filename)
    #         bp, errors = manifest.blueprint_manifest()
    #         bp.to_yaml_str()
    
    else:
        arg_parser.print_help("Help for blueprint tools CLI")

if __name__ == '__main__':
    main()

